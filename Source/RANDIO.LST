					===== Parallax PIC16C5x Assembler v2.3 =====


     1                          	;***********************************************************************************
     2                          	;               RANDIO V1.0 rev A - Random Delay Timmer (USING PIC16C54)
     3                          	;                           BY Brian T. Merchant For Hirst Tech 11/20011
     4                          	;
     5                          	;               Using Parallax PASM Assembler, Based on Dominio rev G code
     6                          	;***********************************************************************************
     7                          	;               
     8                          	;               Purpose is to monitor the white noise arriving at RA.2
     9                          	;               and count into that noise to get the "seed" for a random
    10                          	;               delay timer, and to use these capabilities to form
    11                          	;               a random start up delay (2 min + random amount less than
    12                          	;               10 sec, then to release the output signal (RB.0) to enable
    13                          	;               the controlled system.
    14                          	;
    15                          	;***********************************************************************************
    16                          	;                                       PIC16C54
    17                          	;                       1 = RA2 white in                18 = RA1 
    18                          	;                       2 = RA3 LED Out                 17 = RA0
    19                          	;                       3 = RTCC                        16 = OSC1
    20                          	;                       4 = MCLR                        15 = OSC2
    21                          	;                       5 = VSS                         14 = VDD
    22                          	;                       6 = RB0 Control Out             13 = RB7
    23                          	;                       7 = RB1 Aux Out 1               12 = RB6
    24                          	;                       8 = RB2 Aux Out 2               11 = RB5
    25                          	;                       9 = RB3                         10 = RB4
    26                          	;
    27                          	;***********************************************************************************
    28                          	;
    29                          	;           timing based on 4MHZ crystal  assembler = parallax pasm
    30                          	;			for RC OSC, uncomment correct DEVICE line, and change
    31                          	;			IIME10MS equ constant to match type
    32                          	;
    33                          	;
    34                          	;			DEVICE  pic16c54,XT_OSC,WDT_OFF,PROTECT_ON
    35     000-                 				DEVICE  pic16c54,RC_OSC,WDT_OFF,PROTECT_ON
    36     000-                 				ID      CHECKSUM
    37     1FF- A60             				RESET   start
    38
    39                          	;                       DEFINE CONSTANTS
    40     =0027                	TIME10MS        equ     39              ;adjust timing here if RC clock
    41                          						;4mhz = 39, 1mhz = 10, rc = 
    42                          						;X 10 ms  ,, 5 = PIO CLOCK
    43
    44
    45                          	;                       ALOCATE MEMORY REGISTERS
    46     008-                 			org     8               ;24 GP ram locations from 08h to 1Fh
    47
    48     008-                 	mseconds_10     ds      1       ;08
    49     009-                 	mseconds_50     ds      1       ;09
    50     00A-                 	seconds         ds      1       ;0A
    51     00B-                 	pre_sec         ds      1       ;0B
    52     00C-                 	temp1           ds      1       ;0C
    53     00D-                 	pre_rtcc        ds      1       ;0D
    54     00E-                 	time10          ds      1       ;0E
    55     00F-                 	timer           ds      2       ;10
    56     011-                 	debounce        ds      2       ;12
    57     013-                 	flag            ds      1       ;13     ;"well really you know what this one is, right!"
    58     014-                 	counter_10ms_a  ds      1       ;14     ;used to time 10ms per count, clr before counting
    59     015-                 	counter_10ms_b  ds      1       ;15     ;used to time 10ms per count, clr before counting
    60     016-                 	counter_50ms_a  ds      1       ;16     ;used to time 10ms per count, clr before counting
    61     017-                 	counter_50ms_b  ds      1       ;17     ;used to time 50ms per count, clr before counting
    62     018-                 	switch          ds      1       ;1A     ;used to hold the mode setup value
    63     019-                 	debcounter      ds      3       ;1B     ;used to debounce inputs
    64     01C-                 	minutes_a       ds      1       ;1C     ;used for watch dog timmer
    65     01D-                 	seed			ds		1		;1D 	;used to hold the seed for the number generater
    66     01E-                 	r_count			ds		1		;1E 	;Used to count interval between white noise pulses
    67     01F-                 	s_count			ds		1		;1F		;counts reps to add to seed (8)(one byte)
    68
    69                          	;               LABELS 
    70
    71     =0045                	whitein         equ     RA.2            ;Used to seed random timmer
    72     =0065                	LED             equ     RA.3            ;Output to life light
    73     =0006                	control         equ     RB.0            ;Control Output
    74     =0026                	auxout1         equ     RB.1            ;Auxillary Output 1
    75     =0046                	auxout2         equ     RB.2            ;Auxillary Output 2
    76
    77     =0013                	key_flag        equ     flag.0          ;signals key sw input received
    78     =0033                	sync10          equ     flag.1          ;use to count 10 ms timings
    79     =0053                	sync50          equ     flag.2          ;use to count 50 ms timings
    80     =0073                	key_active      equ     flag.3          ;used to triger key debounce
    81     =0093                	white_flag      equ     flag.4          ;signals whitein sw input received
    82     =00B3                	white_active    equ     flag.5          ;used to triger whitein debounce
    83
    84
    85
    86
    87     000-                 			org     0h
    88                          	;---------------------------------------------------------------------------------------------                
    89                          	;Interupt Service Routine
    90                          	;---------------------------------------------------------------------------------------------
    91     000-                 	time 
    92     000- 2BE             			inc		r_count				;just keep counting till a white noise pulse then analyse
    93
    94                          	;......................................
    95                          	;whitein Input
    96
    97
    98     001-                 	:t205
    99     001- 693 A0A         			jb      white_flag,:t275       ;if pulse detected skip down to section b
   100     003- 6B3 A05         			jb      white_active,:t210     ;input detected, "debouncing"
   101                          	;		jb      whitein,:t300
   102                          	;		setb    white_active
   103                          	;		clr     debcounter+1
   104     005-                 	:t210
   105     005- 745 A08         			jnb      whitein,:t250			;any noise comming in, else just keep counting (r_count)
   106                          	;**********************************************  S E T  * DEBOUNCE * H E R E 
   107                          	;		cjne    debcounter+1,#1,:t300   ;set debounce time here 10ms per count
   108                          			
   109                          			
   110                          	;		setb    white_flag             ;input detected and debounced!
   111
   112     007- A19             			jmp     :t300
   113     008-                 	:t250
   114                          	;		clr     debcounter+1
   115     008- 4B3             			clrb    white_active
   116     009- A19             			jmp		:t300
   117     00A-                 	:t275
   118     00A- 645 A19         			jb		whitein,:t300			;ok we got a noise pulse in (now for some action)
   119     00C- C7D 09E 703 A15 			cjb		r_count,#125,:t280		;if less than 125 load a 0 in the next seed bit else a 1
   120     010- 503             			stc
   121     011- 37D             			rl		seed
   122     012- 2BF             			inc		s_count
   123     013- 4B3             			clrb	white_active
   124     014- A19             			jmp		:t300
   125                          			
   126     015-                 	:t280
   127     015- 403             			clc
   128     016- 37D             			rl		seed
   129     017- 2BF             			inc		s_count
   130     018- 4B3             			clrb	white_active
   131                          			
   132     019-                 	:t300
   133     019- C08 09F 643     			csne	s_count,#8
   134     01C- 593             			setb	white_flag				;ok got the seed, now signal the process
   135                          	;----------------------------------------------
   136     01D-                 	:t600
   137     01D- 201 02C         			mov     temp1,RTCC
   138     01F- 20D             			mov     W,pre_rtcc
   139     020- 08C             			mov     W,temp1 - W
   140     021- 0AE             			sub     time10,W
   141     022- 603 A47         			jc      :time_exit
   142                          	;..............................................................................................
   143                          	;Timing Functions
   144                          	;....................................... if 10ms has passed do the whiteing
   145     024- C27 02E         			mov     time10,#TIME10MS
   146     026- 2A8             			inc     mseconds_10             ;use by routines to count in 10ms inc
   147     027- 2B4             			inc     counter_10ms_a
   148     028- 2B5             			inc     counter_10ms_b
   149     029- 2B9             			inc     debcounter
   150     02A- 2BA             			inc     debcounter+1
   151     02B- 2BB             			inc     debcounter+2
   152     02C- 433             			clrb    sync10                  ;signal 10MS time routines
   153     02D- 793 A30         			jnb		white_flag,:t700
   154     02F- 0FD             			dec		seed
   155     030-                 	:t700
   156     030- C05 088 743 A47 			cjne    mseconds_10,#5,:time_exit
   157                          	;........................................if 50ms has passed do the whiteing
   158     034- 068             			clr     mseconds_10
   159     035- 2A9             			inc     mseconds_50
   160     036- 453             			clrb    sync50                  ;Signal 50MS routines
   161     037- 2B6             			inc     counter_50ms_a          ;use by routines to count in 50ms inc
   162     038- 2B7             			inc     counter_50ms_b          ;use by routines to count in 50ms inc
   163     039- C02 089 743 A47 			cjne    mseconds_50,#2,:time_exit
   164                          	;........................................if 1 second has pased do the whiteing
   165     03D- 069             			clr     mseconds_50
   166     03E- 2AA             			inc    seconds
   167     03F- C02 1A5         			xor     RA,#00000010b           ;Flash the life light!
   168     041- C3C 08A 743 A47 			cjne    seconds,#60,:time_exit
   169                          	;........................................if 1 minute has passed do the whiteing
   170     045- 06A             			clr    seconds
   171     046- 2BC             			inc     minutes_a               ;watchdog timmer
   172                          			;inc    minutes
   173     047-                 	:time_exit
   174     047- 20C 02D         			mov     pre_rtcc,temp1
   175     049- 06C             			clr     temp1
   176     04A- 800             			ret
   177                          	;-----------------------------------------------------------------------------------------------
   178
   179
   180                          	;***********************************************************************************************
   181                          	; Subroutine Block
   182
   183                          	;*******************
   184     04B-                 	clear
   185     04B- 064             			clr     fsr
   186     04C- C08 024         			mov     fsr,#08h
   187     04E-                 	:loop
   188     04E- 060             			clr     00h
   189     04F- 2A4             			inc     fsr
   190     050- CE0 084 743 A4E 			cjne    fsr,#0E0h,:loop
   191     054- 064             			clr     fsr
   192     055- 800             			ret
   193                          			
   194                          	;*******************
   195                          	; 
   196
   197                          	;**********************************************************************************************
   198                          	;       Body of main program
   199                          	;**********************************************************************************************
   200     056-                 	main
   201     056- 900             			call    time
   202     057- 793 A56         			jnb		white_flag,main
   203                          	                       
   204     059-                 	process
   205     059- 900             			call	time
   206     05A- 23D             			test	seed
   207     05B- 743 A59         			jnz		process
   208     05D- 506             			setb	control				;Thats it Folks!
   209                          			
   210     05E-                 	:end_loop	
   211     05E- 900             			call	time
   212     05F- A5E             			jmp		:end_loop
   213                          				
   214
   215
   216
   217
   218
   219                          	;***********************************************************************************
   220                          	;                       INITALISE SYSTEM
   221                          	;***********************************************************************************
   222     060-                 	start
   223     060- C07 002         			mov     OPTION,#00000111b
   224     062- C04 005         			mov     !RA,#00000100b          
   225     064- C00 006         			mov     !RB,#00000000b
   226     066- CFF 025         			mov     RA,#11111111b
   227     068- CFF 026         			mov     RB,#11111111b
   228     06A- 94B             			call    clear
   229     06B-                 	:s10
   230                          	;		djnz    timer,:s10              ;startup delay
   231                          	;		djnz    timer+1,:s10
   232     06B- C27 02E         			mov     time10,#time10ms 
   233     06D- 061             			clr     RTCC
   234                          			
   235     06E-                 	:end 
   236     06E- A56             			jmp     main
   237                          		   
   238     06F- 852 861 86E 864 			retw    'Randio Rev A'
           073- 869 86F 820 852
           077- 865 876 820 841
   239     07B- 843 86F 870 879 			retw    'Copyright 20011'
           07F- 872 869 867 868
           083- 874 820 832 830
           087- 830 831 831
   240     08A- 862 879 820 853 			retw    'by Swamp Development'
           08E- 877 861 86D 870
           092- 820 844 865 876
           096- 865 86C 86F 870
           09A- 86D 865 86E 874
   241     09E- 84D 874 82E 820 			retw    'Mt. Juliet, TN.'
           0A2- 84A 875 86C 869
           0A6- 865 874 82C 820
           0AA- 854 84E 82E
   242     0AD- 846 86F 872 820 			retw    'For Hirst Technology Inc.'
           0B1- 848 869 872 873
           0B5- 874 820 854 865
           0B9- 863 868 86E 86F
           0BD- 86C 86F 867 879
           0C1- 820 849 86E 863
           0C5- 82E
   243     0C6- 84F 863 861 86C 			retw    'Ocala, FL.'
           0CA- 861 82C 820 846
           0CE- 84C 82E
   244
   245     0D0-                 	:end_of_file


						    ===== Errors: 0 =====
